{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "# Unit 9 Problem Set\n",
    "\n",
    "In this problem set we will build a set of classes that will be used to play the card game Blackjack. If you have never played, then you can find the simple rules here: https://www.bicyclecards.com/how-to-play/blackjack/\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## The Card class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "1.Think about a deck of cards. What do you need to know in order to tell one card from another? \n",
    "\n",
    "There are thirteen different ranks, from Ace to King. There are four different suits: Clubs, Diamonds, Hearts, and Spades. So, to know everything about a single card you need its rank and its suit. In card games such as blackjack, where the cards are worth a certain number of points, it is also helpful to have a third variable, called value that is an integer related to a card's rank. The values of the cards are [2,3,4,5,6,7,8,9,10,10,10,10,11], respectively (meaning, the Jack, King, Queen, and 10 have a value of 10 and the Ace has a value of 11).\n",
    "\n",
    "Create a **class** named **Card**. Include three **attributes**: **rank** and **suit** (both strings) and **value** (int). Don't forget the initializing (__init__) and the toString (__str__) methods.\n",
    "\n",
    "Test that you can create a few cards. Make several instances of different cards: try Ace of Spades and Eight of Hearts. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eight of Hearts.\n",
      "8\n",
      "Ace of Spades.\n",
      "11\n"
     ]
    }
   ],
   "source": [
    "class Card:\n",
    "    def __init__(self, rank, suit):\n",
    "        self.rank = rank\n",
    "        self.suit = suit\n",
    "        valuedict = {\"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7,\n",
    "                     \"eight\": 8, \"nine\": 9, \"ten\": 10, \"jack\": 10, \"queen\": 10, \"king\": 10, \"ace\": 11}\n",
    "        self.value = valuedict[rank.lower()]\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"{self.rank.title()} of {self.suit.title()}.\"\n",
    "\n",
    "\n",
    "first = Card(\"eight\", \"hearts\")\n",
    "print(first)\n",
    "print(first.value)\n",
    "second= Card(\"ace\", \"spades\")\n",
    "print(second)\n",
    "print(second.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## The Deck class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "2.A typical deck of cards has one of each rank in one of each suit, for a total of 52 cards. Create a **class** named **Deck**. The **attribute** of our Deck class will be a single list of 52 Card objects named **cards**.\n",
    "\n",
    "To do this, you will need to send three lists to the initializing method as input: ranks, suits, and values. Then use a double for-loop to create the Cards (by calling the initializing method of the Card Class) and append them to the list called cards. To help, here are three lists that you can copy and paste in your code below:\n",
    "\n",
    "ranks = ['Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten','Jack','Queen','King','Ace']\n",
    "\n",
    "suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n",
    "\n",
    "values = [2,3,4,5,6,7,8,9,10,10,10,10,11]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Six of Spades.\n",
      "Five of Clubs.\n",
      "Three of Diamonds.\n",
      "Three of Spades.\n",
      "Ten of Hearts.\n",
      "Four of Hearts.\n",
      "Jack of Clubs.\n",
      "Ten of Spades.\n",
      "Queen of Spades.\n",
      "Four of Diamonds.\n",
      "Eight of Clubs.\n",
      "King of Hearts.\n",
      "Seven of Hearts.\n",
      "Eight of Hearts.\n",
      "Eight of Spades.\n",
      "Two of Spades.\n",
      "King of Clubs.\n",
      "Queen of Hearts.\n",
      "Three of Clubs.\n",
      "Four of Spades.\n",
      "Seven of Clubs.\n",
      "Queen of Clubs.\n",
      "Three of Hearts.\n",
      "Six of Diamonds.\n",
      "Five of Diamonds.\n",
      "Ace of Clubs.\n",
      "Nine of Spades.\n",
      "Five of Hearts.\n",
      "Nine of Hearts.\n",
      "Eight of Diamonds.\n",
      "Six of Clubs.\n",
      "Queen of Diamonds.\n",
      "Four of Clubs.\n",
      "Seven of Diamonds.\n",
      "Seven of Spades.\n",
      "Ace of Spades.\n",
      "Six of Hearts.\n",
      "King of Diamonds.\n",
      "Nine of Diamonds.\n",
      "Two of Hearts.\n",
      "Jack of Hearts.\n",
      "King of Spades.\n",
      "Ace of Hearts.\n",
      "Two of Clubs.\n",
      "Ace of Diamonds.\n",
      "Jack of Diamonds.\n",
      "Ten of Clubs.\n",
      "Two of Diamonds.\n",
      "Jack of Spades.\n",
      "Ten of Diamonds.\n",
      "Nine of Clubs.\n",
      "Five of Spades.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rank = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\n",
    "        'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace']\n",
    "\n",
    "suit = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n",
    "\n",
    "value = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]\n",
    "\n",
    "import random\n",
    "\n",
    "class Deck:\n",
    "    def __init__(self, ranks, suits):\n",
    "        self.cards = []\n",
    "        for i in ranks:\n",
    "            for j in suits:\n",
    "                self.cards.append(Card(i, j))\n",
    "\n",
    "    def shuffle(self):\n",
    "        random.shuffle(self.cards)\n",
    "\n",
    "    def get_top_card(self):\n",
    "        return self.cards.pop(0)\n",
    "\n",
    "    def __str__(self):\n",
    "        mystr = \"\"\n",
    "        for k in self.cards:\n",
    "            mystr = mystr+ f\"{k.rank.title()} of {k.suit.title()}.\" + \"\\n\"\n",
    "        return mystr\n",
    "\n",
    "\n",
    "deck = Deck(rank, suit)\n",
    "deck.shuffle()\n",
    "print(deck)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "3.One obvious **method** that you will need is a **shuffle()** method that shuffles the deck **in place**. This method should reorder the deck randomly. There are many ways to do this, but luckily, the Python random package has a shuffle method built in that shuffles a list in place! \n",
    "\n",
    "Finally, create a method called **get_top_card()**. This method should **return** the card with index 0, and remove it from the deck **in place**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
   ],
   "source": [
    "#edit your code in the cell above to reflect these changes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "4.Use the cell below to test your deck method. Hint: check the length of your deck to make sure that the get_top_card method is removing a card from the deck. Also check that your deck is getting randomly shuffled. Insert some test code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nine of Clubs. \n",
      "\n",
      "51\n"
     ]
    }
   ],
   "source": [
    "print(deck.get_top_card(), \"\\n\")\n",
    "print(len(deck.cards))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## The Blackjack class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "When a 'single' program is built from several classes, it is common to have a runner class that is not intended to create objects. We will name our **runner class**, **Blackjack**. Since we will not be creating instances of this class, we do not need an initializing method. \n",
    "\n",
    "We will need **methods** as follows (notice that they are named so that anyone will know what they do):\n",
    "\n",
    "**player_turn()**, **computer_turn()**, **deal()**, **check_bust()**, **check_blackjack()**, **find_winner()**, and finally a **main** method to control the order of when methods will be called. See below for an outline of the main method. Your job is to finish the main and write the rest of the methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "cocalc": {
     "outputs": {
      "1": {
       "name": "input",
       "opts": {
        "password": false,
        "prompt": "Draw one more? (yes/no) "
       },
       "output_type": "stream",
       "value": "yes"
      }
     }
    },
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Player sum: 17\n",
      "\n",
      " Player Turn\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Draw one more? (yes/no)  yes"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ace of Spades.\n",
      "Card sum: 28\n",
      "Bust. Sum of cards over 21.\n",
      "\n",
      "\n",
      "Final player sum: 28\n",
      "Final computer sum: 17\n",
      "Player went bust. Computer Wins!\n"
     ]
    }
   ],
   "source": [
    "class Blackjack:\n",
    "    def startingdeal(self, deck, tally):\n",
    "        '''deals a single card and returns the new tally of all that\n",
    "        player/'s cards. Does not print what card is dealt'''\n",
    "        card = deck.get_top_card()\n",
    "        tally = tally + int(card.value)\n",
    "        return tally\n",
    "    \n",
    "    def deal(self, deck, tally):\n",
    "        '''deals a single card and returns the new tally of all that\n",
    "        player/'s cards. Prints what card is dealt'''\n",
    "        card = deck.get_top_card()\n",
    "        tally = tally + int(card.value)\n",
    "        print(card)\n",
    "        return tally\n",
    "\n",
    "    def check_bust(self, tally):\n",
    "        '''returns True or False based on whether the tally is greater than\n",
    "        21'''\n",
    "        if tally > 21:\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "\n",
    "    def check_blackjack(self, tally):\n",
    "        '''returns True or False based on whether the tally is equal to 21'''\n",
    "        if tally == 21:\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "\n",
    "    # player method\n",
    "    def player_turn(self, deck, card_sum):\n",
    "        '''Continues to ask the user if they want to choose a new card (and\n",
    "        then chooses a card) until the player busts or chooses to stop\n",
    "        receiving more cards. It then returns the player_sum.'''\n",
    "        print(\"\\n\", \"Player Turn\")\n",
    "        safe = True\n",
    "        while safe:\n",
    "            cont = input(\"Draw one more? (yes/no) \")\n",
    "            if  cont == \"yes\":\n",
    "                card_sum = self.deal(deck, card_sum)\n",
    "                print(f\"Card sum: {card_sum}\")\n",
    "                if self.check_bust(card_sum):\n",
    "                    safe = False\n",
    "                    print(f\"Bust. Sum of cards over 21.\")\n",
    "                    return card_sum\n",
    "            if cont == \"no\":\n",
    "                print(f\"Card sum: {card_sum}\")\n",
    "                return (card_sum)\n",
    "\n",
    "    # computer method\n",
    "    def computer_turn(self, deck, computer_sum):\n",
    "        '''Continues to choose a new card until the computer busts or the\n",
    "        comp_sum becomes 17 or higher. It then returns the comp_sum.'''\n",
    "        print(\"\\n\", \"COMPUTER TURN\")\n",
    "        safe = True\n",
    "        while safe:\n",
    "            if computer_sum < 17:\n",
    "                computer_sum = self.deal(deck, computer_sum)\n",
    "                if self.check_bust(computer_sum):\n",
    "                    safe = False\n",
    "                    print(f\"Computer sum: {computer_sum}.\")\n",
    "                    return (computer_sum)\n",
    "            if computer_sum >= 17:\n",
    "                safe = False\n",
    "                print(f\"Computer sum: {computer_sum}\")\n",
    "                return (computer_sum)\n",
    "\n",
    "    def find_winner(self, card_sum, computer_sum):\n",
    "        '''Prints Player Wins!, Computer Wins!, or Tie! based on a\n",
    "        comparison of player_sum and comp_sum.'''\n",
    "        if self.check_blackjack(card_sum):\n",
    "            return (\"Blackjack! Player Wins!\")\n",
    "        elif (self.check_bust(card_sum) == False and\n",
    "              self.check_bust(computer_sum) == False):\n",
    "            if card_sum > computer_sum:\n",
    "                return (\"Player Wins!\")\n",
    "            elif card_sum < computer_sum:\n",
    "                return (\"Computer Wins!\")\n",
    "            elif card_sum == computer_sum:\n",
    "                return (\"Tie!\")\n",
    "        elif self.check_bust(card_sum):\n",
    "            return (\"Player went bust. Computer Wins!\")\n",
    "        elif card_sum < 21 and self.check_bust(computer_sum) is True:\n",
    "            return (\"Computer is bust. Player Wins!\")\n",
    "\n",
    "    def main(self):\n",
    "\n",
    "        # create a runner class\n",
    "        game = Blackjack()\n",
    "\n",
    "        # we will need these lists below\n",
    "        ranks = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\n",
    "                 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace']\n",
    "        suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n",
    "        values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11]\n",
    "\n",
    "        # create a deck object\n",
    "        deck = Deck(ranks, suits)\n",
    "\n",
    "        # shuffle the deck\n",
    "        deck.shuffle()\n",
    "\n",
    "        # initialize a player_sum and comp_sum to zero\n",
    "        card_sum = 0\n",
    "        computer_sum = 0\n",
    "\n",
    "        # deal the first four cards (alternating player/comp/player/comp)\n",
    "        card_sum = game.startingdeal(deck, card_sum)\n",
    "        computer_sum = game.startingdeal(deck, computer_sum)\n",
    "        card_sum = game.startingdeal(deck, card_sum)\n",
    "        computer_sum = game.startingdeal(deck, computer_sum)\n",
    "        print(f\"Player sum: {card_sum}\")\n",
    "\n",
    "        # let the player take their turn (meaning they can choose more cards\n",
    "        # until they choose to stop or bust)\n",
    "        card_sum = game.player_turn(deck, card_sum)\n",
    "        # if the player's sum doesn't exactly equal to 21, let the computer\n",
    "        # take its turn (meaning it can choose more cards until it chooses to\n",
    "        # stop or bust)\n",
    "        if card_sum < 21:\n",
    "            computer_sum = game.computer_turn(deck, computer_sum)\n",
    "        # calculate who the winner is\n",
    "        print(\"\\n\")\n",
    "        print(f\"Final player sum: {card_sum}\")\n",
    "        print(f\"Final computer sum: {computer_sum}\")\n",
    "        print(game.find_winner(card_sum, computer_sum))\n",
    "\n",
    "\n",
    "# run the main program\n",
    "if __name__ == '__main__':\n",
    "    Blackjack().main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (Ubuntu Linux)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}